// socket.js
const { Server } = require("socket.io");

let io;
const documentRooms = new Map(); // documentId -> Set(socketIds)

function initSocket(server) {
  io = new Server(server, {
    cors: {
      origin: "*",
      methods: ["GET", "POST"],
    },
  });

  io.on("connection", (socket) => {
    console.log("üîå –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", socket.id);

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
    socket.on("joinDocument", ({ documentId, role }) => {
      socket.join(documentId);
      console.log(
        `üìÑ ${socket.id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ documentId ${documentId} –∫–∞–∫ ${role}`
      );
    });

    // –ö–æ–≥–¥–∞ –ø–∞—Ü–∏–µ–Ω—Ç –ø–æ–¥–ø–∏—Å–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç
    socket.on("patientSigned", ({ documentId }) => {
      console.log(`‚úÖ –î–æ–∫—É–º–µ–Ω—Ç ${documentId} –ø–æ–¥–ø–∏—Å–∞–Ω –ø–∞—Ü–∏–µ–Ω—Ç–æ–º`);

      io.to(documentId).emit("documentSigned", {
        documentId,
        timestamp: new Date(),
      });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    socket.on("disconnect", () => {
      console.log("‚ùå –û—Ç–∫–ª—é—á–µ–Ω —Å–æ–∫–µ—Ç", socket.id);
    });
  });
}

function getIO() {
  if (!io) throw new Error("Socket.io –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
  return io;
}

module.exports = {
  initSocket,
  getIO,
};
